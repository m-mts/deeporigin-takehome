// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file proto/transitions/v1/schedule.proto (package shedule, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from enum shedule.Frequency
 */
export enum Frequency {
  /**
   * @generated from enum value: Once = 0;
   */
  Once = 0,

  /**
   * @generated from enum value: Recurring = 1;
   */
  Recurring = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(Frequency)
proto3.util.setEnumType(Frequency, "shedule.Frequency", [
  { no: 0, name: "Once" },
  { no: 1, name: "Recurring" },
]);

/**
 * @generated from enum shedule.ExecutorType
 */
export enum ExecutorType {
  /**
   * @generated from enum value: shell = 0;
   */
  shell = 0,

  /**
   * @generated from enum value: http = 1;
   */
  http = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(ExecutorType)
proto3.util.setEnumType(ExecutorType, "shedule.ExecutorType", [
  { no: 0, name: "shell" },
  { no: 1, name: "http" },
]);

/**
 * @generated from enum shedule.Status
 */
export enum Status {
  /**
   * @generated from enum value: InQueue = 0;
   */
  InQueue = 0,

  /**
   * @generated from enum value: Started = 1;
   */
  Started = 1,

  /**
   * @generated from enum value: Finished = 2;
   */
  Finished = 2,

  /**
   * @generated from enum value: Failed = 3;
   */
  Failed = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(Status)
proto3.util.setEnumType(Status, "shedule.Status", [
  { no: 0, name: "InQueue" },
  { no: 1, name: "Started" },
  { no: 2, name: "Finished" },
  { no: 3, name: "Failed" },
]);

/**
 * @generated from message shedule.TaskRun
 */
export class TaskRun extends Message<TaskRun> {
  /**
   * @generated from field: string scheduleId = 1;
   */
  scheduleId = "";

  /**
   * @generated from field: shedule.Status status = 2;
   */
  status = Status.InQueue;

  /**
   * @generated from field: google.protobuf.Timestamp runAt = 3;
   */
  runAt?: Timestamp;

  constructor(data?: PartialMessage<TaskRun>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "shedule.TaskRun";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "scheduleId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "status", kind: "enum", T: proto3.getEnumType(Status) },
    { no: 3, name: "runAt", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaskRun {
    return new TaskRun().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaskRun {
    return new TaskRun().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaskRun {
    return new TaskRun().fromJsonString(jsonString, options);
  }

  static equals(a: TaskRun | PlainMessage<TaskRun> | undefined, b: TaskRun | PlainMessage<TaskRun> | undefined): boolean {
    return proto3.util.equals(TaskRun, a, b);
  }
}

/**
 * @generated from message shedule.Statistics
 */
export class Statistics extends Message<Statistics> {
  /**
   * @generated from field: int32 taskRunsCount = 1;
   */
  taskRunsCount = 0;

  /**
   * @generated from field: google.protobuf.Timestamp lastSuccess = 2;
   */
  lastSuccess?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp lastError = 3;
   */
  lastError?: Timestamp;

  /**
   * @generated from field: int32 inQueueCount = 4;
   */
  inQueueCount = 0;

  /**
   * @generated from field: int32 errorCount = 5;
   */
  errorCount = 0;

  /**
   * @generated from field: int32 successCount = 6;
   */
  successCount = 0;

  /**
   * @generated from field: string currentStatus = 7;
   */
  currentStatus = "";

  constructor(data?: PartialMessage<Statistics>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "shedule.Statistics";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "taskRunsCount", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "lastSuccess", kind: "message", T: Timestamp },
    { no: 3, name: "lastError", kind: "message", T: Timestamp },
    { no: 4, name: "inQueueCount", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "errorCount", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "successCount", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "currentStatus", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Statistics {
    return new Statistics().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Statistics {
    return new Statistics().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Statistics {
    return new Statistics().fromJsonString(jsonString, options);
  }

  static equals(a: Statistics | PlainMessage<Statistics> | undefined, b: Statistics | PlainMessage<Statistics> | undefined): boolean {
    return proto3.util.equals(Statistics, a, b);
  }
}

/**
 * @generated from message shedule.Schedule
 */
export class Schedule extends Message<Schedule> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: bool enabled = 3;
   */
  enabled = false;

  /**
   * @generated from field: string ownerId = 4;
   */
  ownerId = "";

  /**
   * @generated from field: shedule.Frequency frequency = 5;
   */
  frequency = Frequency.Once;

  /**
   * @generated from field: google.protobuf.Timestamp nextRun = 6;
   */
  nextRun?: Timestamp;

  /**
   * @generated from field: string recurringRule = 7;
   */
  recurringRule = "";

  /**
   * @generated from field: google.protobuf.Timestamp createdAt = 8;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updatedAt = 9;
   */
  updatedAt?: Timestamp;

  /**
   * @generated from field: string createdBy = 10;
   */
  createdBy = "";

  /**
   * @generated from field: string updatedBy = 11;
   */
  updatedBy = "";

  /**
   * @generated from field: shedule.ExecutorType executorType = 12;
   */
  executorType = ExecutorType.shell;

  /**
   * @generated from field: string executorProperties = 13;
   */
  executorProperties = "";

  /**
   * @generated from field: repeated shedule.TaskRun taskRuns = 14;
   */
  taskRuns: TaskRun[] = [];

  /**
   * @generated from field: optional shedule.Statistics statistics = 15;
   */
  statistics?: Statistics;

  constructor(data?: PartialMessage<Schedule>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "shedule.Schedule";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "ownerId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "frequency", kind: "enum", T: proto3.getEnumType(Frequency) },
    { no: 6, name: "nextRun", kind: "message", T: Timestamp },
    { no: 7, name: "recurringRule", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "createdAt", kind: "message", T: Timestamp },
    { no: 9, name: "updatedAt", kind: "message", T: Timestamp },
    { no: 10, name: "createdBy", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "updatedBy", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "executorType", kind: "enum", T: proto3.getEnumType(ExecutorType) },
    { no: 13, name: "executorProperties", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "taskRuns", kind: "message", T: TaskRun, repeated: true },
    { no: 15, name: "statistics", kind: "message", T: Statistics, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Schedule {
    return new Schedule().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Schedule {
    return new Schedule().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Schedule {
    return new Schedule().fromJsonString(jsonString, options);
  }

  static equals(a: Schedule | PlainMessage<Schedule> | undefined, b: Schedule | PlainMessage<Schedule> | undefined): boolean {
    return proto3.util.equals(Schedule, a, b);
  }
}

/**
 * @generated from message shedule.ScheduleRequest
 */
export class ScheduleRequest extends Message<ScheduleRequest> {
  /**
   * @generated from field: optional string id = 1;
   */
  id?: string;

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: bool enabled = 3;
   */
  enabled = false;

  /**
   * @generated from field: string ownerId = 4;
   */
  ownerId = "";

  /**
   * @generated from field: shedule.Frequency frequency = 5;
   */
  frequency = Frequency.Once;

  /**
   * @generated from field: google.protobuf.Timestamp nextRun = 6;
   */
  nextRun?: Timestamp;

  /**
   * @generated from field: string recurringRule = 7;
   */
  recurringRule = "";

  /**
   * @generated from field: shedule.ExecutorType executorType = 8;
   */
  executorType = ExecutorType.shell;

  /**
   * @generated from field: string executorProperties = 9;
   */
  executorProperties = "";

  constructor(data?: PartialMessage<ScheduleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "shedule.ScheduleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "ownerId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "frequency", kind: "enum", T: proto3.getEnumType(Frequency) },
    { no: 6, name: "nextRun", kind: "message", T: Timestamp },
    { no: 7, name: "recurringRule", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "executorType", kind: "enum", T: proto3.getEnumType(ExecutorType) },
    { no: 9, name: "executorProperties", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScheduleRequest {
    return new ScheduleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScheduleRequest {
    return new ScheduleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScheduleRequest {
    return new ScheduleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ScheduleRequest | PlainMessage<ScheduleRequest> | undefined, b: ScheduleRequest | PlainMessage<ScheduleRequest> | undefined): boolean {
    return proto3.util.equals(ScheduleRequest, a, b);
  }
}

/**
 * @generated from message shedule.ScheduleByIdRequest
 */
export class ScheduleByIdRequest extends Message<ScheduleByIdRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<ScheduleByIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "shedule.ScheduleByIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScheduleByIdRequest {
    return new ScheduleByIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScheduleByIdRequest {
    return new ScheduleByIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScheduleByIdRequest {
    return new ScheduleByIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ScheduleByIdRequest | PlainMessage<ScheduleByIdRequest> | undefined, b: ScheduleByIdRequest | PlainMessage<ScheduleByIdRequest> | undefined): boolean {
    return proto3.util.equals(ScheduleByIdRequest, a, b);
  }
}

/**
 * @generated from message shedule.ScheduleResponse
 */
export class ScheduleResponse extends Message<ScheduleResponse> {
  /**
   * @generated from field: shedule.Schedule schedule = 1;
   */
  schedule?: Schedule;

  constructor(data?: PartialMessage<ScheduleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "shedule.ScheduleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schedule", kind: "message", T: Schedule },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScheduleResponse {
    return new ScheduleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScheduleResponse {
    return new ScheduleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScheduleResponse {
    return new ScheduleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ScheduleResponse | PlainMessage<ScheduleResponse> | undefined, b: ScheduleResponse | PlainMessage<ScheduleResponse> | undefined): boolean {
    return proto3.util.equals(ScheduleResponse, a, b);
  }
}

/**
 * @generated from message shedule.GetScheduleListRequest
 */
export class GetScheduleListRequest extends Message<GetScheduleListRequest> {
  /**
   * @generated from field: optional string ownerId = 1;
   */
  ownerId?: string;

  /**
   * @generated from field: optional bool enabled = 2;
   */
  enabled?: boolean;

  constructor(data?: PartialMessage<GetScheduleListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "shedule.GetScheduleListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ownerId", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetScheduleListRequest {
    return new GetScheduleListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetScheduleListRequest {
    return new GetScheduleListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetScheduleListRequest {
    return new GetScheduleListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetScheduleListRequest | PlainMessage<GetScheduleListRequest> | undefined, b: GetScheduleListRequest | PlainMessage<GetScheduleListRequest> | undefined): boolean {
    return proto3.util.equals(GetScheduleListRequest, a, b);
  }
}

/**
 * @generated from message shedule.GetScheduleListResponse
 */
export class GetScheduleListResponse extends Message<GetScheduleListResponse> {
  /**
   * @generated from field: repeated shedule.Schedule schedule = 1;
   */
  schedule: Schedule[] = [];

  constructor(data?: PartialMessage<GetScheduleListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "shedule.GetScheduleListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schedule", kind: "message", T: Schedule, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetScheduleListResponse {
    return new GetScheduleListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetScheduleListResponse {
    return new GetScheduleListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetScheduleListResponse {
    return new GetScheduleListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetScheduleListResponse | PlainMessage<GetScheduleListResponse> | undefined, b: GetScheduleListResponse | PlainMessage<GetScheduleListResponse> | undefined): boolean {
    return proto3.util.equals(GetScheduleListResponse, a, b);
  }
}

/**
 * @generated from message shedule.ScheduleOperationStatusResponse
 */
export class ScheduleOperationStatusResponse extends Message<ScheduleOperationStatusResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  constructor(data?: PartialMessage<ScheduleOperationStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "shedule.ScheduleOperationStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScheduleOperationStatusResponse {
    return new ScheduleOperationStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScheduleOperationStatusResponse {
    return new ScheduleOperationStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScheduleOperationStatusResponse {
    return new ScheduleOperationStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ScheduleOperationStatusResponse | PlainMessage<ScheduleOperationStatusResponse> | undefined, b: ScheduleOperationStatusResponse | PlainMessage<ScheduleOperationStatusResponse> | undefined): boolean {
    return proto3.util.equals(ScheduleOperationStatusResponse, a, b);
  }
}

/**
 * @generated from message shedule.PlanExecutionRequest
 */
export class PlanExecutionRequest extends Message<PlanExecutionRequest> {
  /**
   * @generated from field: google.protobuf.Timestamp nextRunFrom = 1;
   */
  nextRunFrom?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp nextRunTo = 2;
   */
  nextRunTo?: Timestamp;

  constructor(data?: PartialMessage<PlanExecutionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "shedule.PlanExecutionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nextRunFrom", kind: "message", T: Timestamp },
    { no: 2, name: "nextRunTo", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlanExecutionRequest {
    return new PlanExecutionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlanExecutionRequest {
    return new PlanExecutionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlanExecutionRequest {
    return new PlanExecutionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PlanExecutionRequest | PlainMessage<PlanExecutionRequest> | undefined, b: PlanExecutionRequest | PlainMessage<PlanExecutionRequest> | undefined): boolean {
    return proto3.util.equals(PlanExecutionRequest, a, b);
  }
}

